{
  "CONTRIBUTING.html": {
    "href": "CONTRIBUTING.html",
    "title": "Contribution | CICDTemplate",
    "summary": "Contribution Please make sure the code style meets the .editorconfig"
  },
  "README.html": {
    "href": "README.html",
    "title": "CI / CD Template | CICDTemplate",
    "summary": "CI / CD Template Cloud Native - Clean Architecture template, for ASP.NET 9 Web API, powered by .NET Aspire and DAPR Component Badge Build Status Nuget Version Security Score Card Usage Install the template dotnet new install CloudNative.CleanArchitecture.Template To create a new solution dotnet new cn-ca -n MyCloudNativeApi Getting Started Once you clone the solution, open with Visual Studio Code Install the extension - Polyglot Notebooks, better to install all recommended extensions, suggested by VS Code, when you open the workspace The documents under docs directory would be a good start To build and deploy the project, follow the interactive notebooks under build and deployment directories."
  },
  "SECURITY.html": {
    "href": "SECURITY.html",
    "title": "Security Policy | CICDTemplate",
    "summary": "Security Policy Supported Versions The table shows supported versions Version Supported 2025.x ✅ < 2025.x ❌ Reporting a Vulnerability Please raise Issues for reporting Vulnerabilities This is a hobby project, so, please expect some delay in providing fixes."
  },
  "api/CICDTemplate.Api.Controllers.Bindings.BindingsController.html": {
    "href": "api/CICDTemplate.Api.Controllers.Bindings.BindingsController.html",
    "title": "Class BindingsController | CICDTemplate",
    "summary": "Class BindingsController Namespace CICDTemplate.Api.Controllers.Bindings Assembly CICDTemplate.Api.dll [Route(\"api/bindings\")] [ApiController] public class BindingsController : ControllerBase Inheritance object ControllerBase BindingsController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.Problem(string, string, int?, string, string, IDictionary<string, object>) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary, IDictionary<string, object>) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BindingsController(ILogger<BindingsController>, Counter<int>) public BindingsController(ILogger<BindingsController> logger, Counter<int> counter) Parameters logger ILogger<BindingsController> counter Counter<int> Methods Cron() [HttpPost(\"cron\")] public IActionResult Cron() Returns IActionResult"
  },
  "api/CICDTemplate.Api.Controllers.Bindings.html": {
    "href": "api/CICDTemplate.Api.Controllers.Bindings.html",
    "title": "Namespace CICDTemplate.Api.Controllers.Bindings | CICDTemplate",
    "summary": "Namespace CICDTemplate.Api.Controllers.Bindings Classes BindingsController"
  },
  "api/CICDTemplate.Api.Controllers.Configurations.ConfigurationsController.html": {
    "href": "api/CICDTemplate.Api.Controllers.Configurations.ConfigurationsController.html",
    "title": "Class ConfigurationsController | CICDTemplate",
    "summary": "Class ConfigurationsController Namespace CICDTemplate.Api.Controllers.Configurations Assembly CICDTemplate.Api.dll [Route(\"api/configurations\")] [ApiController] public class ConfigurationsController : ControllerBase Inheritance object ControllerBase ConfigurationsController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.Problem(string, string, int?, string, string, IDictionary<string, object>) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary, IDictionary<string, object>) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ConfigurationsController(ISender) public ConfigurationsController(ISender sender) Parameters sender ISender Methods Read(string) [HttpGet(\"read\")] public Task<ActionResult<Product>> Read(string name) Parameters name string Returns Task<ActionResult<Product>>"
  },
  "api/CICDTemplate.Api.Controllers.Configurations.html": {
    "href": "api/CICDTemplate.Api.Controllers.Configurations.html",
    "title": "Namespace CICDTemplate.Api.Controllers.Configurations | CICDTemplate",
    "summary": "Namespace CICDTemplate.Api.Controllers.Configurations Classes ConfigurationsController"
  },
  "api/CICDTemplate.Api.Controllers.Products.CreateProductRequest.html": {
    "href": "api/CICDTemplate.Api.Controllers.Products.CreateProductRequest.html",
    "title": "Class CreateProductRequest | CICDTemplate",
    "summary": "Class CreateProductRequest Namespace CICDTemplate.Api.Controllers.Products Assembly CICDTemplate.Api.dll Request to create product public sealed record CreateProductRequest : IEquatable<CreateProductRequest> Inheritance object CreateProductRequest Implements IEquatable<CreateProductRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors CreateProductRequest(string, string) Request to create product public CreateProductRequest(string Name, string Description) Parameters Name string Description string Properties Description public string Description { get; init; } Property Value string Name public string Name { get; init; } Property Value string"
  },
  "api/CICDTemplate.Api.Controllers.Products.ProductResponse.html": {
    "href": "api/CICDTemplate.Api.Controllers.Products.ProductResponse.html",
    "title": "Class ProductResponse | CICDTemplate",
    "summary": "Class ProductResponse Namespace CICDTemplate.Api.Controllers.Products Assembly CICDTemplate.Api.dll Product response public sealed record ProductResponse : IEquatable<ProductResponse> Inheritance object ProductResponse Implements IEquatable<ProductResponse> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ProductResponse(Guid, string, string?) Product response public ProductResponse(Guid Id, string Name, string? Description) Parameters Id Guid Name string Description string Properties Description public string? Description { get; init; } Property Value string Id public Guid Id { get; init; } Property Value Guid Name public string Name { get; init; } Property Value string"
  },
  "api/CICDTemplate.Api.Controllers.Products.ProductsController.html": {
    "href": "api/CICDTemplate.Api.Controllers.Products.ProductsController.html",
    "title": "Class ProductsController | CICDTemplate",
    "summary": "Class ProductsController Namespace CICDTemplate.Api.Controllers.Products Assembly CICDTemplate.Api.dll [Route(\"api/products\")] [ApiController] public class ProductsController : ControllerBase Inheritance object ControllerBase ProductsController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.Problem(string, string, int?, string, string, IDictionary<string, object>) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary, IDictionary<string, object>) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ProductsController(ISender, ILogger<ProductsController>) public ProductsController(ISender sender, ILogger<ProductsController> logger) Parameters sender ISender logger ILogger<ProductsController> Methods CreateProduct(CreateProductRequest, CancellationToken) [HttpPost] public Task<ActionResult<Guid>> CreateProduct(CreateProductRequest request, CancellationToken cancellationToken = default) Parameters request CreateProductRequest cancellationToken CancellationToken Returns Task<ActionResult<Guid>> GetProducts(CancellationToken) [HttpGet] public Task<ActionResult<ReadProductsResponse>> GetProducts(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Returns Task<ActionResult<ReadProductsResponse>>"
  },
  "api/CICDTemplate.Api.Controllers.Products.ReadProductsResponse.html": {
    "href": "api/CICDTemplate.Api.Controllers.Products.ReadProductsResponse.html",
    "title": "Class ReadProductsResponse | CICDTemplate",
    "summary": "Class ReadProductsResponse Namespace CICDTemplate.Api.Controllers.Products Assembly CICDTemplate.Api.dll Read products - response public record ReadProductsResponse : IEquatable<ReadProductsResponse> Inheritance object ReadProductsResponse Implements IEquatable<ReadProductsResponse> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadProductsResponse(Collection<ProductResponse>) Read products - response public ReadProductsResponse(Collection<ProductResponse> Products) Parameters Products Collection<ProductResponse> Properties Products public Collection<ProductResponse> Products { get; init; } Property Value Collection<ProductResponse>"
  },
  "api/CICDTemplate.Api.Controllers.Products.html": {
    "href": "api/CICDTemplate.Api.Controllers.Products.html",
    "title": "Namespace CICDTemplate.Api.Controllers.Products | CICDTemplate",
    "summary": "Namespace CICDTemplate.Api.Controllers.Products Classes CreateProductRequest Request to create product ProductResponse Product response ProductsController ReadProductsResponse Read products - response"
  },
  "api/CICDTemplate.Api.Controllers.Publisher.PublisherController.html": {
    "href": "api/CICDTemplate.Api.Controllers.Publisher.PublisherController.html",
    "title": "Class PublisherController | CICDTemplate",
    "summary": "Class PublisherController Namespace CICDTemplate.Api.Controllers.Publisher Assembly CICDTemplate.Api.dll [Route(\"api/publisher\")] [ApiController] public class PublisherController : ControllerBase Inheritance object ControllerBase PublisherController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.Problem(string, string, int?, string, string, IDictionary<string, object>) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary, IDictionary<string, object>) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PublisherController(ISender, ILogger<PublisherController>) public PublisherController(ISender sender, ILogger<PublisherController> logger) Parameters sender ISender logger ILogger<PublisherController> Methods Publish(Product, CancellationToken) [HttpPost(\"publish\")] public Task<IActionResult> Publish(Product message, CancellationToken cancellationToken) Parameters message Product cancellationToken CancellationToken Returns Task<IActionResult>"
  },
  "api/CICDTemplate.Api.Controllers.Publisher.html": {
    "href": "api/CICDTemplate.Api.Controllers.Publisher.html",
    "title": "Namespace CICDTemplate.Api.Controllers.Publisher | CICDTemplate",
    "summary": "Namespace CICDTemplate.Api.Controllers.Publisher Classes PublisherController"
  },
  "api/CICDTemplate.Api.Controllers.Secrets.SecretsController.html": {
    "href": "api/CICDTemplate.Api.Controllers.Secrets.SecretsController.html",
    "title": "Class SecretsController | CICDTemplate",
    "summary": "Class SecretsController Namespace CICDTemplate.Api.Controllers.Secrets Assembly CICDTemplate.Api.dll [Route(\"api/secrets\")] [ApiController] public class SecretsController : ControllerBase Inheritance object ControllerBase SecretsController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.Problem(string, string, int?, string, string, IDictionary<string, object>) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary, IDictionary<string, object>) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SecretsController(ISender) public SecretsController(ISender sender) Parameters sender ISender Methods Read(string) [HttpGet(\"read\")] public Task<ActionResult<string>> Read(string key) Parameters key string Returns Task<ActionResult<string>>"
  },
  "api/CICDTemplate.Api.Controllers.Secrets.html": {
    "href": "api/CICDTemplate.Api.Controllers.Secrets.html",
    "title": "Namespace CICDTemplate.Api.Controllers.Secrets | CICDTemplate",
    "summary": "Namespace CICDTemplate.Api.Controllers.Secrets Classes SecretsController"
  },
  "api/CICDTemplate.Api.Controllers.States.StatesController.html": {
    "href": "api/CICDTemplate.Api.Controllers.States.StatesController.html",
    "title": "Class StatesController | CICDTemplate",
    "summary": "Class StatesController Namespace CICDTemplate.Api.Controllers.States Assembly CICDTemplate.Api.dll [Route(\"api/states\")] [ApiController] public class StatesController : ControllerBase Inheritance object ControllerBase StatesController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.Problem(string, string, int?, string, string, IDictionary<string, object>) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary, IDictionary<string, object>) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors StatesController(ISender) public StatesController(ISender sender) Parameters sender ISender Methods Delete(string) [HttpDelete(\"delete\")] public Task<IActionResult> Delete(string productName) Parameters productName string Returns Task<IActionResult> Read(string) [HttpGet(\"read\")] public Task<ActionResult<ProductState>> Read(string productName) Parameters productName string Returns Task<ActionResult<ProductState>> Save(Product) [HttpPost(\"save\")] public Task<IActionResult> Save(Product state) Parameters state Product Returns Task<IActionResult>"
  },
  "api/CICDTemplate.Api.Controllers.States.html": {
    "href": "api/CICDTemplate.Api.Controllers.States.html",
    "title": "Namespace CICDTemplate.Api.Controllers.States | CICDTemplate",
    "summary": "Namespace CICDTemplate.Api.Controllers.States Classes StatesController"
  },
  "api/CICDTemplate.Api.Controllers.Subscriber.SubscriberController.html": {
    "href": "api/CICDTemplate.Api.Controllers.Subscriber.SubscriberController.html",
    "title": "Class SubscriberController | CICDTemplate",
    "summary": "Class SubscriberController Namespace CICDTemplate.Api.Controllers.Subscriber Assembly CICDTemplate.Api.dll [Route(\"api/[controller]\")] [ApiController] public class SubscriberController : ControllerBase Inheritance object ControllerBase SubscriberController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.Problem(string, string, int?, string, string, IDictionary<string, object>) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary, IDictionary<string, object>) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SubscriberController(ILogger<SubscriberController>) public SubscriberController(ILogger<SubscriberController> logger) Parameters logger ILogger<SubscriberController> Methods Subscribe(Product) [HttpPost(\"consume\")] [Topic(\"pubsub\", \"message\", null, null)] public IActionResult Subscribe(Product message) Parameters message Product Returns IActionResult"
  },
  "api/CICDTemplate.Api.Controllers.Subscriber.html": {
    "href": "api/CICDTemplate.Api.Controllers.Subscriber.html",
    "title": "Namespace CICDTemplate.Api.Controllers.Subscriber | CICDTemplate",
    "summary": "Namespace CICDTemplate.Api.Controllers.Subscriber Classes SubscriberController"
  },
  "api/CICDTemplate.Api.Models.Common.Product.html": {
    "href": "api/CICDTemplate.Api.Models.Common.Product.html",
    "title": "Class Product | CICDTemplate",
    "summary": "Class Product Namespace CICDTemplate.Api.Models.Common Assembly CICDTemplate.Api.dll public record Product : IEquatable<Product> Inheritance object Product Implements IEquatable<Product> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Product(string, string) public Product(string Name, string Description) Parameters Name string Description string Properties Description public string Description { get; init; } Property Value string Name public string Name { get; init; } Property Value string"
  },
  "api/CICDTemplate.Api.Models.Common.html": {
    "href": "api/CICDTemplate.Api.Models.Common.html",
    "title": "Namespace CICDTemplate.Api.Models.Common | CICDTemplate",
    "summary": "Namespace CICDTemplate.Api.Models.Common Classes Product"
  },
  "api/CICDTemplate.Application.Abstractions.Caching.ICacheService.html": {
    "href": "api/CICDTemplate.Application.Abstractions.Caching.ICacheService.html",
    "title": "Interface ICacheService | CICDTemplate",
    "summary": "Interface ICacheService Namespace CICDTemplate.Application.Abstractions.Caching Assembly CICDTemplate.Application.dll public interface ICacheService Methods GetAsync<T>(string, CancellationToken) Task<T?> GetAsync<T>(string key, CancellationToken cancellationToken = default) Parameters key string cancellationToken CancellationToken Returns Task<T> Type Parameters T RemoveAsync(string, CancellationToken) Task RemoveAsync(string key, CancellationToken cancellationToken = default) Parameters key string cancellationToken CancellationToken Returns Task SetAsync<T>(string, T, TimeSpan?, CancellationToken) Task SetAsync<T>(string key, T value, TimeSpan? expiration, CancellationToken cancellationToken = default) Parameters key string value T expiration TimeSpan? cancellationToken CancellationToken Returns Task Type Parameters T"
  },
  "api/CICDTemplate.Application.Abstractions.Caching.html": {
    "href": "api/CICDTemplate.Application.Abstractions.Caching.html",
    "title": "Namespace CICDTemplate.Application.Abstractions.Caching | CICDTemplate",
    "summary": "Namespace CICDTemplate.Application.Abstractions.Caching Interfaces ICacheService"
  },
  "api/CICDTemplate.Application.Abstractions.Clock.IDateTimeProvider.html": {
    "href": "api/CICDTemplate.Application.Abstractions.Clock.IDateTimeProvider.html",
    "title": "Interface IDateTimeProvider | CICDTemplate",
    "summary": "Interface IDateTimeProvider Namespace CICDTemplate.Application.Abstractions.Clock Assembly CICDTemplate.Application.dll Date time provider public interface IDateTimeProvider Properties Now Easy to mock DateTime Now { get; } Property Value DateTime"
  },
  "api/CICDTemplate.Application.Abstractions.Clock.html": {
    "href": "api/CICDTemplate.Application.Abstractions.Clock.html",
    "title": "Namespace CICDTemplate.Application.Abstractions.Clock | CICDTemplate",
    "summary": "Namespace CICDTemplate.Application.Abstractions.Clock Interfaces IDateTimeProvider Date time provider"
  },
  "api/CICDTemplate.Application.Behaviors.ValidationBehavior-2.html": {
    "href": "api/CICDTemplate.Application.Behaviors.ValidationBehavior-2.html",
    "title": "Class ValidationBehavior<TRequest, TResponse> | CICDTemplate",
    "summary": "Class ValidationBehavior<TRequest, TResponse> Namespace CICDTemplate.Application.Behaviors Assembly CICDTemplate.Application.dll public class ValidationBehavior<TRequest, TResponse> : IPipelineBehavior<TRequest, TResponse> where TRequest : IRequest<TResponse> Type Parameters TRequest TResponse Inheritance object ValidationBehavior<TRequest, TResponse> Implements IPipelineBehavior<TRequest, TResponse> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ValidationBehavior(IEnumerable<IValidator<TRequest>>) public ValidationBehavior(IEnumerable<IValidator<TRequest>> validators) Parameters validators IEnumerable<IValidator<TRequest>> Methods Handle(TRequest, RequestHandlerDelegate<TResponse>, CancellationToken) Pipeline handler. Perform any additional behavior and await the next delegate as necessary public Task<TResponse> Handle(TRequest request, RequestHandlerDelegate<TResponse> next, CancellationToken cancellationToken) Parameters request TRequest Incoming request next RequestHandlerDelegate<TResponse> Awaitable delegate for the next action in the pipeline. Eventually this delegate represents the handler. cancellationToken CancellationToken Cancellation token Returns Task<TResponse> Awaitable task returning the TResponse"
  },
  "api/CICDTemplate.Application.Behaviors.html": {
    "href": "api/CICDTemplate.Application.Behaviors.html",
    "title": "Namespace CICDTemplate.Application.Behaviors | CICDTemplate",
    "summary": "Namespace CICDTemplate.Application.Behaviors Classes ValidationBehavior<TRequest, TResponse>"
  },
  "api/CICDTemplate.Application.Bootstrap.html": {
    "href": "api/CICDTemplate.Application.Bootstrap.html",
    "title": "Class Bootstrap | CICDTemplate",
    "summary": "Class Bootstrap Namespace CICDTemplate.Application Assembly CICDTemplate.Application.dll public static class Bootstrap Inheritance object Bootstrap Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddApplication(IServiceCollection) public static IServiceCollection AddApplication(this IServiceCollection services) Parameters services IServiceCollection Returns IServiceCollection"
  },
  "api/CICDTemplate.Application.Configurations.Queries.ReadConfigurationQuery.html": {
    "href": "api/CICDTemplate.Application.Configurations.Queries.ReadConfigurationQuery.html",
    "title": "Class ReadConfigurationQuery | CICDTemplate",
    "summary": "Class ReadConfigurationQuery Namespace CICDTemplate.Application.Configurations.Queries Assembly CICDTemplate.Application.dll public record ReadConfigurationQuery : IRequest<string?>, IBaseRequest, IEquatable<ReadConfigurationQuery> Inheritance object ReadConfigurationQuery Implements IRequest<string> IBaseRequest IEquatable<ReadConfigurationQuery> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadConfigurationQuery(string) public ReadConfigurationQuery(string Key) Parameters Key string Properties Key public string Key { get; init; } Property Value string"
  },
  "api/CICDTemplate.Application.Configurations.Queries.ReadConfigurationQueryHandler.html": {
    "href": "api/CICDTemplate.Application.Configurations.Queries.ReadConfigurationQueryHandler.html",
    "title": "Class ReadConfigurationQueryHandler | CICDTemplate",
    "summary": "Class ReadConfigurationQueryHandler Namespace CICDTemplate.Application.Configurations.Queries Assembly CICDTemplate.Application.dll public class ReadConfigurationQueryHandler : IRequestHandler<ReadConfigurationQuery, string?> Inheritance object ReadConfigurationQueryHandler Implements IRequestHandler<ReadConfigurationQuery, string> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadConfigurationQueryHandler(DaprClient, ILogger<ReadConfigurationQueryHandler>) public ReadConfigurationQueryHandler(DaprClient daprClient, ILogger<ReadConfigurationQueryHandler> logger) Parameters daprClient DaprClient logger ILogger<ReadConfigurationQueryHandler> Methods Handle(ReadConfigurationQuery, CancellationToken) Handles a request public Task<string?> Handle(ReadConfigurationQuery request, CancellationToken cancellationToken) Parameters request ReadConfigurationQuery The request cancellationToken CancellationToken Cancellation token Returns Task<string> Response from the request"
  },
  "api/CICDTemplate.Application.Configurations.Queries.html": {
    "href": "api/CICDTemplate.Application.Configurations.Queries.html",
    "title": "Namespace CICDTemplate.Application.Configurations.Queries | CICDTemplate",
    "summary": "Namespace CICDTemplate.Application.Configurations.Queries Classes ReadConfigurationQuery ReadConfigurationQueryHandler"
  },
  "api/CICDTemplate.Application.Products.Commands.CreateProduct.CreateProductCommand.html": {
    "href": "api/CICDTemplate.Application.Products.Commands.CreateProduct.CreateProductCommand.html",
    "title": "Class CreateProductCommand | CICDTemplate",
    "summary": "Class CreateProductCommand Namespace CICDTemplate.Application.Products.Commands.CreateProduct Assembly CICDTemplate.Application.dll Create product command public sealed record CreateProductCommand : IRequest<Guid?>, IBaseRequest, IEquatable<CreateProductCommand> Inheritance object CreateProductCommand Implements IRequest<Guid?> IBaseRequest IEquatable<CreateProductCommand> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors CreateProductCommand(string, string) Create product command public CreateProductCommand(string Name, string Description) Parameters Name string Product name Description string Product description Properties Description Product description public string Description { get; init; } Property Value string Name Product name public string Name { get; init; } Property Value string"
  },
  "api/CICDTemplate.Application.Products.Commands.CreateProduct.CreateProductCommandHandler.html": {
    "href": "api/CICDTemplate.Application.Products.Commands.CreateProduct.CreateProductCommandHandler.html",
    "title": "Class CreateProductCommandHandler | CICDTemplate",
    "summary": "Class CreateProductCommandHandler Namespace CICDTemplate.Application.Products.Commands.CreateProduct Assembly CICDTemplate.Application.dll public sealed class CreateProductCommandHandler : IRequestHandler<CreateProductCommand, Guid?> Inheritance object CreateProductCommandHandler Implements IRequestHandler<CreateProductCommand, Guid?> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors CreateProductCommandHandler(IProductsRepository, IDateTimeProvider) public CreateProductCommandHandler(IProductsRepository repository, IDateTimeProvider dateTimeProvider) Parameters repository IProductsRepository dateTimeProvider IDateTimeProvider Methods Handle(CreateProductCommand, CancellationToken) Handles a request public Task<Guid?> Handle(CreateProductCommand request, CancellationToken cancellationToken) Parameters request CreateProductCommand The request cancellationToken CancellationToken Cancellation token Returns Task<Guid?> Response from the request"
  },
  "api/CICDTemplate.Application.Products.Commands.CreateProduct.CreateProductCommandValidator.html": {
    "href": "api/CICDTemplate.Application.Products.Commands.CreateProduct.CreateProductCommandValidator.html",
    "title": "Class CreateProductCommandValidator | CICDTemplate",
    "summary": "Class CreateProductCommandValidator Namespace CICDTemplate.Application.Products.Commands.CreateProduct Assembly CICDTemplate.Application.dll public class CreateProductCommandValidator : AbstractValidator<CreateProductCommand>, IValidator<CreateProductCommand>, IValidator, IEnumerable<IValidationRule>, IEnumerable Inheritance object AbstractValidator<CreateProductCommand> CreateProductCommandValidator Implements IValidator<CreateProductCommand> IValidator IEnumerable<IValidationRule> IEnumerable Inherited Members AbstractValidator<CreateProductCommand>.Validate(CreateProductCommand) AbstractValidator<CreateProductCommand>.ValidateAsync(CreateProductCommand, CancellationToken) AbstractValidator<CreateProductCommand>.Validate(ValidationContext<CreateProductCommand>) AbstractValidator<CreateProductCommand>.ValidateAsync(ValidationContext<CreateProductCommand>, CancellationToken) AbstractValidator<CreateProductCommand>.CreateDescriptor() AbstractValidator<CreateProductCommand>.RuleFor<TProperty>(Expression<Func<CreateProductCommand, TProperty>>) AbstractValidator<CreateProductCommand>.RuleForEach<TElement>(Expression<Func<CreateProductCommand, IEnumerable<TElement>>>) AbstractValidator<CreateProductCommand>.RuleSet(string, Action) AbstractValidator<CreateProductCommand>.When(Func<CreateProductCommand, bool>, Action) AbstractValidator<CreateProductCommand>.When(Func<CreateProductCommand, ValidationContext<CreateProductCommand>, bool>, Action) AbstractValidator<CreateProductCommand>.Unless(Func<CreateProductCommand, bool>, Action) AbstractValidator<CreateProductCommand>.Unless(Func<CreateProductCommand, ValidationContext<CreateProductCommand>, bool>, Action) AbstractValidator<CreateProductCommand>.WhenAsync(Func<CreateProductCommand, CancellationToken, Task<bool>>, Action) AbstractValidator<CreateProductCommand>.WhenAsync(Func<CreateProductCommand, ValidationContext<CreateProductCommand>, CancellationToken, Task<bool>>, Action) AbstractValidator<CreateProductCommand>.UnlessAsync(Func<CreateProductCommand, CancellationToken, Task<bool>>, Action) AbstractValidator<CreateProductCommand>.UnlessAsync(Func<CreateProductCommand, ValidationContext<CreateProductCommand>, CancellationToken, Task<bool>>, Action) AbstractValidator<CreateProductCommand>.Include(IValidator<CreateProductCommand>) AbstractValidator<CreateProductCommand>.Include<TValidator>(Func<CreateProductCommand, TValidator>) AbstractValidator<CreateProductCommand>.GetEnumerator() AbstractValidator<CreateProductCommand>.PreValidate(ValidationContext<CreateProductCommand>, ValidationResult) AbstractValidator<CreateProductCommand>.RaiseValidationException(ValidationContext<CreateProductCommand>, ValidationResult) AbstractValidator<CreateProductCommand>.OnRuleAdded(IValidationRule<CreateProductCommand>) AbstractValidator<CreateProductCommand>.ClassLevelCascadeMode AbstractValidator<CreateProductCommand>.RuleLevelCascadeMode object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CreateProductCommandValidator() public CreateProductCommandValidator()"
  },
  "api/CICDTemplate.Application.Products.Commands.CreateProduct.html": {
    "href": "api/CICDTemplate.Application.Products.Commands.CreateProduct.html",
    "title": "Namespace CICDTemplate.Application.Products.Commands.CreateProduct | CICDTemplate",
    "summary": "Namespace CICDTemplate.Application.Products.Commands.CreateProduct Classes CreateProductCommand Create product command CreateProductCommandHandler CreateProductCommandValidator"
  },
  "api/CICDTemplate.Application.Products.Commands.DeleteState.DeleteStateCommand.html": {
    "href": "api/CICDTemplate.Application.Products.Commands.DeleteState.DeleteStateCommand.html",
    "title": "Class DeleteStateCommand | CICDTemplate",
    "summary": "Class DeleteStateCommand Namespace CICDTemplate.Application.Products.Commands.DeleteState Assembly CICDTemplate.Application.dll public record DeleteStateCommand : IRequest, IBaseRequest, IEquatable<DeleteStateCommand> Inheritance object DeleteStateCommand Implements IRequest IBaseRequest IEquatable<DeleteStateCommand> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DeleteStateCommand(string) public DeleteStateCommand(string ProductName) Parameters ProductName string Properties ProductName public string ProductName { get; init; } Property Value string"
  },
  "api/CICDTemplate.Application.Products.Commands.DeleteState.DeleteStateCommandHandler.html": {
    "href": "api/CICDTemplate.Application.Products.Commands.DeleteState.DeleteStateCommandHandler.html",
    "title": "Class DeleteStateCommandHandler | CICDTemplate",
    "summary": "Class DeleteStateCommandHandler Namespace CICDTemplate.Application.Products.Commands.DeleteState Assembly CICDTemplate.Application.dll public sealed class DeleteStateCommandHandler : IRequestHandler<DeleteStateCommand> Inheritance object DeleteStateCommandHandler Implements IRequestHandler<DeleteStateCommand> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors DeleteStateCommandHandler(DaprClient, ILogger<DeleteStateCommandHandler>) public DeleteStateCommandHandler(DaprClient daprClient, ILogger<DeleteStateCommandHandler> logger) Parameters daprClient DaprClient logger ILogger<DeleteStateCommandHandler> Methods Handle(DeleteStateCommand, CancellationToken) Handles a request public Task Handle(DeleteStateCommand request, CancellationToken cancellationToken) Parameters request DeleteStateCommand The request cancellationToken CancellationToken Cancellation token Returns Task Response from the request"
  },
  "api/CICDTemplate.Application.Products.Commands.DeleteState.html": {
    "href": "api/CICDTemplate.Application.Products.Commands.DeleteState.html",
    "title": "Namespace CICDTemplate.Application.Products.Commands.DeleteState | CICDTemplate",
    "summary": "Namespace CICDTemplate.Application.Products.Commands.DeleteState Classes DeleteStateCommand DeleteStateCommandHandler"
  },
  "api/CICDTemplate.Application.Products.Queries.ReadProducts.ReadProductsQuery.html": {
    "href": "api/CICDTemplate.Application.Products.Queries.ReadProducts.ReadProductsQuery.html",
    "title": "Class ReadProductsQuery | CICDTemplate",
    "summary": "Class ReadProductsQuery Namespace CICDTemplate.Application.Products.Queries.ReadProducts Assembly CICDTemplate.Application.dll public sealed record ReadProductsQuery : IRequest<Product[]>, IBaseRequest, IEquatable<ReadProductsQuery> Inheritance object ReadProductsQuery Implements IRequest<Product[]> IBaseRequest IEquatable<ReadProductsQuery> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ReadProductsQuery() public ReadProductsQuery()"
  },
  "api/CICDTemplate.Application.Products.Queries.ReadProducts.ReadProductsQueryHandler.html": {
    "href": "api/CICDTemplate.Application.Products.Queries.ReadProducts.ReadProductsQueryHandler.html",
    "title": "Class ReadProductsQueryHandler | CICDTemplate",
    "summary": "Class ReadProductsQueryHandler Namespace CICDTemplate.Application.Products.Queries.ReadProducts Assembly CICDTemplate.Application.dll public sealed class ReadProductsQueryHandler : IRequestHandler<ReadProductsQuery, Product[]> Inheritance object ReadProductsQueryHandler Implements IRequestHandler<ReadProductsQuery, Product[]> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ReadProductsQueryHandler(IProductsRepository, ICacheService, ILogger<ReadProductsQueryHandler>) public ReadProductsQueryHandler(IProductsRepository repository, ICacheService cacheService, ILogger<ReadProductsQueryHandler> logger) Parameters repository IProductsRepository cacheService ICacheService logger ILogger<ReadProductsQueryHandler> Methods Handle(ReadProductsQuery, CancellationToken) Handles a request public Task<Product[]> Handle(ReadProductsQuery request, CancellationToken cancellationToken) Parameters request ReadProductsQuery The request cancellationToken CancellationToken Cancellation token Returns Task<Product[]> Response from the request"
  },
  "api/CICDTemplate.Application.Products.Queries.ReadProducts.html": {
    "href": "api/CICDTemplate.Application.Products.Queries.ReadProducts.html",
    "title": "Namespace CICDTemplate.Application.Products.Queries.ReadProducts | CICDTemplate",
    "summary": "Namespace CICDTemplate.Application.Products.Queries.ReadProducts Classes ReadProductsQuery ReadProductsQueryHandler"
  },
  "api/CICDTemplate.Application.PubSub.Commands.PublishProduct.PublishProductCommand.html": {
    "href": "api/CICDTemplate.Application.PubSub.Commands.PublishProduct.PublishProductCommand.html",
    "title": "Class PublishProductCommand | CICDTemplate",
    "summary": "Class PublishProductCommand Namespace CICDTemplate.Application.PubSub.Commands.PublishProduct Assembly CICDTemplate.Application.dll public record PublishProductCommand : IRequest, IBaseRequest, IEquatable<PublishProductCommand> Inheritance object PublishProductCommand Implements IRequest IBaseRequest IEquatable<PublishProductCommand> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PublishProductCommand(string, string) public PublishProductCommand(string Name, string Description) Parameters Name string Description string Properties Description public string Description { get; init; } Property Value string Name public string Name { get; init; } Property Value string"
  },
  "api/CICDTemplate.Application.PubSub.Commands.PublishProduct.PublishProductCommandHandler.html": {
    "href": "api/CICDTemplate.Application.PubSub.Commands.PublishProduct.PublishProductCommandHandler.html",
    "title": "Class PublishProductCommandHandler | CICDTemplate",
    "summary": "Class PublishProductCommandHandler Namespace CICDTemplate.Application.PubSub.Commands.PublishProduct Assembly CICDTemplate.Application.dll public sealed class PublishProductCommandHandler : IRequestHandler<PublishProductCommand> Inheritance object PublishProductCommandHandler Implements IRequestHandler<PublishProductCommand> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors PublishProductCommandHandler(DaprClient, ILogger<PublishProductCommandHandler>) public PublishProductCommandHandler(DaprClient daprClient, ILogger<PublishProductCommandHandler> logger) Parameters daprClient DaprClient logger ILogger<PublishProductCommandHandler> Methods Handle(PublishProductCommand, CancellationToken) Handles a request public Task Handle(PublishProductCommand request, CancellationToken cancellationToken) Parameters request PublishProductCommand The request cancellationToken CancellationToken Cancellation token Returns Task Response from the request"
  },
  "api/CICDTemplate.Application.PubSub.Commands.PublishProduct.PublishProductCommandValidator.html": {
    "href": "api/CICDTemplate.Application.PubSub.Commands.PublishProduct.PublishProductCommandValidator.html",
    "title": "Class PublishProductCommandValidator | CICDTemplate",
    "summary": "Class PublishProductCommandValidator Namespace CICDTemplate.Application.PubSub.Commands.PublishProduct Assembly CICDTemplate.Application.dll public class PublishProductCommandValidator : AbstractValidator<PublishProductCommand>, IValidator<PublishProductCommand>, IValidator, IEnumerable<IValidationRule>, IEnumerable Inheritance object AbstractValidator<PublishProductCommand> PublishProductCommandValidator Implements IValidator<PublishProductCommand> IValidator IEnumerable<IValidationRule> IEnumerable Inherited Members AbstractValidator<PublishProductCommand>.Validate(PublishProductCommand) AbstractValidator<PublishProductCommand>.ValidateAsync(PublishProductCommand, CancellationToken) AbstractValidator<PublishProductCommand>.Validate(ValidationContext<PublishProductCommand>) AbstractValidator<PublishProductCommand>.ValidateAsync(ValidationContext<PublishProductCommand>, CancellationToken) AbstractValidator<PublishProductCommand>.CreateDescriptor() AbstractValidator<PublishProductCommand>.RuleFor<TProperty>(Expression<Func<PublishProductCommand, TProperty>>) AbstractValidator<PublishProductCommand>.RuleForEach<TElement>(Expression<Func<PublishProductCommand, IEnumerable<TElement>>>) AbstractValidator<PublishProductCommand>.RuleSet(string, Action) AbstractValidator<PublishProductCommand>.When(Func<PublishProductCommand, bool>, Action) AbstractValidator<PublishProductCommand>.When(Func<PublishProductCommand, ValidationContext<PublishProductCommand>, bool>, Action) AbstractValidator<PublishProductCommand>.Unless(Func<PublishProductCommand, bool>, Action) AbstractValidator<PublishProductCommand>.Unless(Func<PublishProductCommand, ValidationContext<PublishProductCommand>, bool>, Action) AbstractValidator<PublishProductCommand>.WhenAsync(Func<PublishProductCommand, CancellationToken, Task<bool>>, Action) AbstractValidator<PublishProductCommand>.WhenAsync(Func<PublishProductCommand, ValidationContext<PublishProductCommand>, CancellationToken, Task<bool>>, Action) AbstractValidator<PublishProductCommand>.UnlessAsync(Func<PublishProductCommand, CancellationToken, Task<bool>>, Action) AbstractValidator<PublishProductCommand>.UnlessAsync(Func<PublishProductCommand, ValidationContext<PublishProductCommand>, CancellationToken, Task<bool>>, Action) AbstractValidator<PublishProductCommand>.Include(IValidator<PublishProductCommand>) AbstractValidator<PublishProductCommand>.Include<TValidator>(Func<PublishProductCommand, TValidator>) AbstractValidator<PublishProductCommand>.GetEnumerator() AbstractValidator<PublishProductCommand>.PreValidate(ValidationContext<PublishProductCommand>, ValidationResult) AbstractValidator<PublishProductCommand>.RaiseValidationException(ValidationContext<PublishProductCommand>, ValidationResult) AbstractValidator<PublishProductCommand>.OnRuleAdded(IValidationRule<PublishProductCommand>) AbstractValidator<PublishProductCommand>.ClassLevelCascadeMode AbstractValidator<PublishProductCommand>.RuleLevelCascadeMode object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PublishProductCommandValidator() public PublishProductCommandValidator()"
  },
  "api/CICDTemplate.Application.PubSub.Commands.PublishProduct.html": {
    "href": "api/CICDTemplate.Application.PubSub.Commands.PublishProduct.html",
    "title": "Namespace CICDTemplate.Application.PubSub.Commands.PublishProduct | CICDTemplate",
    "summary": "Namespace CICDTemplate.Application.PubSub.Commands.PublishProduct Classes PublishProductCommand PublishProductCommandHandler PublishProductCommandValidator"
  },
  "api/CICDTemplate.Application.Secrets.Queries.ReadSecretQuery.html": {
    "href": "api/CICDTemplate.Application.Secrets.Queries.ReadSecretQuery.html",
    "title": "Class ReadSecretQuery | CICDTemplate",
    "summary": "Class ReadSecretQuery Namespace CICDTemplate.Application.Secrets.Queries Assembly CICDTemplate.Application.dll public record ReadSecretQuery : IRequest<string?>, IBaseRequest, IEquatable<ReadSecretQuery> Inheritance object ReadSecretQuery Implements IRequest<string> IBaseRequest IEquatable<ReadSecretQuery> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadSecretQuery(string) public ReadSecretQuery(string Key) Parameters Key string Properties Key public string Key { get; init; } Property Value string"
  },
  "api/CICDTemplate.Application.Secrets.Queries.ReadSecretQueryHandler.html": {
    "href": "api/CICDTemplate.Application.Secrets.Queries.ReadSecretQueryHandler.html",
    "title": "Class ReadSecretQueryHandler | CICDTemplate",
    "summary": "Class ReadSecretQueryHandler Namespace CICDTemplate.Application.Secrets.Queries Assembly CICDTemplate.Application.dll public sealed class ReadSecretQueryHandler : IRequestHandler<ReadSecretQuery, string?> Inheritance object ReadSecretQueryHandler Implements IRequestHandler<ReadSecretQuery, string> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ReadSecretQueryHandler(DaprClient, ILogger<ReadSecretQueryHandler>) public ReadSecretQueryHandler(DaprClient daprClient, ILogger<ReadSecretQueryHandler> logger) Parameters daprClient DaprClient logger ILogger<ReadSecretQueryHandler> Methods Handle(ReadSecretQuery, CancellationToken) Handles a request public Task<string?> Handle(ReadSecretQuery request, CancellationToken cancellationToken) Parameters request ReadSecretQuery The request cancellationToken CancellationToken Cancellation token Returns Task<string> Response from the request"
  },
  "api/CICDTemplate.Application.Secrets.Queries.html": {
    "href": "api/CICDTemplate.Application.Secrets.Queries.html",
    "title": "Namespace CICDTemplate.Application.Secrets.Queries | CICDTemplate",
    "summary": "Namespace CICDTemplate.Application.Secrets.Queries Classes ReadSecretQuery ReadSecretQueryHandler"
  },
  "api/CICDTemplate.Application.States.Commands.SaveState.SaveStateCommand.html": {
    "href": "api/CICDTemplate.Application.States.Commands.SaveState.SaveStateCommand.html",
    "title": "Class SaveStateCommand | CICDTemplate",
    "summary": "Class SaveStateCommand Namespace CICDTemplate.Application.States.Commands.SaveState Assembly CICDTemplate.Application.dll public record SaveStateCommand : IRequest, IBaseRequest, IEquatable<SaveStateCommand> Inheritance object SaveStateCommand Implements IRequest IBaseRequest IEquatable<SaveStateCommand> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SaveStateCommand(string, string) public SaveStateCommand(string Name, string Description) Parameters Name string Description string Properties Description public string Description { get; init; } Property Value string Name public string Name { get; init; } Property Value string"
  },
  "api/CICDTemplate.Application.States.Commands.SaveState.SaveStateCommandHandler.html": {
    "href": "api/CICDTemplate.Application.States.Commands.SaveState.SaveStateCommandHandler.html",
    "title": "Class SaveStateCommandHandler | CICDTemplate",
    "summary": "Class SaveStateCommandHandler Namespace CICDTemplate.Application.States.Commands.SaveState Assembly CICDTemplate.Application.dll public sealed class SaveStateCommandHandler : IRequestHandler<SaveStateCommand> Inheritance object SaveStateCommandHandler Implements IRequestHandler<SaveStateCommand> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors SaveStateCommandHandler(DaprClient, ILogger<SaveStateCommandHandler>) public SaveStateCommandHandler(DaprClient daprClient, ILogger<SaveStateCommandHandler> logger) Parameters daprClient DaprClient logger ILogger<SaveStateCommandHandler> Methods Handle(SaveStateCommand, CancellationToken) Handles a request public Task Handle(SaveStateCommand request, CancellationToken cancellationToken) Parameters request SaveStateCommand The request cancellationToken CancellationToken Cancellation token Returns Task Response from the request"
  },
  "api/CICDTemplate.Application.States.Commands.SaveState.SaveStateCommandValidator.html": {
    "href": "api/CICDTemplate.Application.States.Commands.SaveState.SaveStateCommandValidator.html",
    "title": "Class SaveStateCommandValidator | CICDTemplate",
    "summary": "Class SaveStateCommandValidator Namespace CICDTemplate.Application.States.Commands.SaveState Assembly CICDTemplate.Application.dll public class SaveStateCommandValidator : AbstractValidator<SaveStateCommand>, IValidator<SaveStateCommand>, IValidator, IEnumerable<IValidationRule>, IEnumerable Inheritance object AbstractValidator<SaveStateCommand> SaveStateCommandValidator Implements IValidator<SaveStateCommand> IValidator IEnumerable<IValidationRule> IEnumerable Inherited Members AbstractValidator<SaveStateCommand>.Validate(SaveStateCommand) AbstractValidator<SaveStateCommand>.ValidateAsync(SaveStateCommand, CancellationToken) AbstractValidator<SaveStateCommand>.Validate(ValidationContext<SaveStateCommand>) AbstractValidator<SaveStateCommand>.ValidateAsync(ValidationContext<SaveStateCommand>, CancellationToken) AbstractValidator<SaveStateCommand>.CreateDescriptor() AbstractValidator<SaveStateCommand>.RuleFor<TProperty>(Expression<Func<SaveStateCommand, TProperty>>) AbstractValidator<SaveStateCommand>.RuleForEach<TElement>(Expression<Func<SaveStateCommand, IEnumerable<TElement>>>) AbstractValidator<SaveStateCommand>.RuleSet(string, Action) AbstractValidator<SaveStateCommand>.When(Func<SaveStateCommand, bool>, Action) AbstractValidator<SaveStateCommand>.When(Func<SaveStateCommand, ValidationContext<SaveStateCommand>, bool>, Action) AbstractValidator<SaveStateCommand>.Unless(Func<SaveStateCommand, bool>, Action) AbstractValidator<SaveStateCommand>.Unless(Func<SaveStateCommand, ValidationContext<SaveStateCommand>, bool>, Action) AbstractValidator<SaveStateCommand>.WhenAsync(Func<SaveStateCommand, CancellationToken, Task<bool>>, Action) AbstractValidator<SaveStateCommand>.WhenAsync(Func<SaveStateCommand, ValidationContext<SaveStateCommand>, CancellationToken, Task<bool>>, Action) AbstractValidator<SaveStateCommand>.UnlessAsync(Func<SaveStateCommand, CancellationToken, Task<bool>>, Action) AbstractValidator<SaveStateCommand>.UnlessAsync(Func<SaveStateCommand, ValidationContext<SaveStateCommand>, CancellationToken, Task<bool>>, Action) AbstractValidator<SaveStateCommand>.Include(IValidator<SaveStateCommand>) AbstractValidator<SaveStateCommand>.Include<TValidator>(Func<SaveStateCommand, TValidator>) AbstractValidator<SaveStateCommand>.GetEnumerator() AbstractValidator<SaveStateCommand>.PreValidate(ValidationContext<SaveStateCommand>, ValidationResult) AbstractValidator<SaveStateCommand>.RaiseValidationException(ValidationContext<SaveStateCommand>, ValidationResult) AbstractValidator<SaveStateCommand>.OnRuleAdded(IValidationRule<SaveStateCommand>) AbstractValidator<SaveStateCommand>.ClassLevelCascadeMode AbstractValidator<SaveStateCommand>.RuleLevelCascadeMode object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SaveStateCommandValidator() public SaveStateCommandValidator()"
  },
  "api/CICDTemplate.Application.States.Commands.SaveState.html": {
    "href": "api/CICDTemplate.Application.States.Commands.SaveState.html",
    "title": "Namespace CICDTemplate.Application.States.Commands.SaveState | CICDTemplate",
    "summary": "Namespace CICDTemplate.Application.States.Commands.SaveState Classes SaveStateCommand SaveStateCommandHandler SaveStateCommandValidator"
  },
  "api/CICDTemplate.Application.States.Queries.ReadState.ProductState.html": {
    "href": "api/CICDTemplate.Application.States.Queries.ReadState.ProductState.html",
    "title": "Class ProductState | CICDTemplate",
    "summary": "Class ProductState Namespace CICDTemplate.Application.States.Queries.ReadState Assembly CICDTemplate.Application.dll public record ProductState : IEquatable<ProductState> Inheritance object ProductState Implements IEquatable<ProductState> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ProductState(string, string) public ProductState(string Name, string Description) Parameters Name string Description string Properties Description public string Description { get; init; } Property Value string Name public string Name { get; init; } Property Value string"
  },
  "api/CICDTemplate.Application.States.Queries.ReadState.ReadStateQuery.html": {
    "href": "api/CICDTemplate.Application.States.Queries.ReadState.ReadStateQuery.html",
    "title": "Class ReadStateQuery | CICDTemplate",
    "summary": "Class ReadStateQuery Namespace CICDTemplate.Application.States.Queries.ReadState Assembly CICDTemplate.Application.dll public record ReadStateQuery : IRequest<ProductState?>, IBaseRequest, IEquatable<ReadStateQuery> Inheritance object ReadStateQuery Implements IRequest<ProductState> IBaseRequest IEquatable<ReadStateQuery> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadStateQuery(string) public ReadStateQuery(string ProductName) Parameters ProductName string Properties ProductName public string ProductName { get; init; } Property Value string"
  },
  "api/CICDTemplate.Application.States.Queries.ReadState.ReadStateQueryHandler.html": {
    "href": "api/CICDTemplate.Application.States.Queries.ReadState.ReadStateQueryHandler.html",
    "title": "Class ReadStateQueryHandler | CICDTemplate",
    "summary": "Class ReadStateQueryHandler Namespace CICDTemplate.Application.States.Queries.ReadState Assembly CICDTemplate.Application.dll public sealed class ReadStateQueryHandler : IRequestHandler<ReadStateQuery, ProductState?> Inheritance object ReadStateQueryHandler Implements IRequestHandler<ReadStateQuery, ProductState> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ReadStateQueryHandler(DaprClient, ILogger<ReadStateQueryHandler>) public ReadStateQueryHandler(DaprClient daprClient, ILogger<ReadStateQueryHandler> logger) Parameters daprClient DaprClient logger ILogger<ReadStateQueryHandler> Methods Handle(ReadStateQuery, CancellationToken) Handles a request public Task<ProductState?> Handle(ReadStateQuery request, CancellationToken cancellationToken) Parameters request ReadStateQuery The request cancellationToken CancellationToken Cancellation token Returns Task<ProductState> Response from the request"
  },
  "api/CICDTemplate.Application.States.Queries.ReadState.html": {
    "href": "api/CICDTemplate.Application.States.Queries.ReadState.html",
    "title": "Namespace CICDTemplate.Application.States.Queries.ReadState | CICDTemplate",
    "summary": "Namespace CICDTemplate.Application.States.Queries.ReadState Classes ProductState ReadStateQuery ReadStateQueryHandler"
  },
  "api/CICDTemplate.Application.html": {
    "href": "api/CICDTemplate.Application.html",
    "title": "Namespace CICDTemplate.Application | CICDTemplate",
    "summary": "Namespace CICDTemplate.Application Classes Bootstrap"
  },
  "api/CICDTemplate.Domain.Abstract.Constants.html": {
    "href": "api/CICDTemplate.Domain.Abstract.Constants.html",
    "title": "Class Constants | CICDTemplate",
    "summary": "Class Constants Namespace CICDTemplate.Domain.Abstract Assembly CICDTemplate.Domain.dll public static class Constants Inheritance object Constants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields AllProductsCacheKey public const string AllProductsCacheKey = \"AllProducts\" Field Value string CacheConnectionstringName public const string CacheConnectionstringName = \"redis\" Field Value string ConfigStoreName public const string ConfigStoreName = \"configstore\" Field Value string DatabaseConnectionstringName public const string DatabaseConnectionstringName = \"cicdtemplatedb\" Field Value string PubSubName public const string PubSubName = \"pubsub\" Field Value string PubSubTopicName public const string PubSubTopicName = \"message\" Field Value string SecretsStoreName public const string SecretsStoreName = \"secretstore\" Field Value string StateStoreName public const string StateStoreName = \"statestore\" Field Value string"
  },
  "api/CICDTemplate.Domain.Abstract.html": {
    "href": "api/CICDTemplate.Domain.Abstract.html",
    "title": "Namespace CICDTemplate.Domain.Abstract | CICDTemplate",
    "summary": "Namespace CICDTemplate.Domain.Abstract Classes Constants"
  },
  "api/CICDTemplate.Domain.Entities.Entity.html": {
    "href": "api/CICDTemplate.Domain.Entities.Entity.html",
    "title": "Class Entity | CICDTemplate",
    "summary": "Class Entity Namespace CICDTemplate.Domain.Entities Assembly CICDTemplate.Domain.dll public abstract class Entity Inheritance object Entity Derived Product Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Entity() protected Entity() Entity(Guid) protected Entity(Guid id) Parameters id Guid Properties CreatedAtUtc Created at time in UTC public DateTime CreatedAtUtc { get; set; } Property Value DateTime Id Unique Identifier public Guid Id { get; protected set; } Property Value Guid UpdatedAtUtc Updated at time in UTC public DateTime? UpdatedAtUtc { get; set; } Property Value DateTime?"
  },
  "api/CICDTemplate.Domain.Entities.Product.html": {
    "href": "api/CICDTemplate.Domain.Entities.Product.html",
    "title": "Class Product | CICDTemplate",
    "summary": "Class Product Namespace CICDTemplate.Domain.Entities Assembly CICDTemplate.Domain.dll Product entity public sealed class Product : Entity Inheritance object Entity Product Inherited Members Entity.Id Entity.CreatedAtUtc Entity.UpdatedAtUtc object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Description Product description public string? Description { get; set; } Property Value string Name Product name public string Name { get; set; } Property Value string"
  },
  "api/CICDTemplate.Domain.Entities.html": {
    "href": "api/CICDTemplate.Domain.Entities.html",
    "title": "Namespace CICDTemplate.Domain.Entities | CICDTemplate",
    "summary": "Namespace CICDTemplate.Domain.Entities Classes Entity Product Product entity"
  },
  "api/CICDTemplate.Domain.Repositories.IProductsRepository.html": {
    "href": "api/CICDTemplate.Domain.Repositories.IProductsRepository.html",
    "title": "Interface IProductsRepository | CICDTemplate",
    "summary": "Interface IProductsRepository Namespace CICDTemplate.Domain.Repositories Assembly CICDTemplate.Domain.dll Products repository public interface IProductsRepository Methods CreateProductAsync(Product, CancellationToken) Create product Task<Guid?> CreateProductAsync(Product product, CancellationToken cancellationToken = default) Parameters product Product Product cancellationToken CancellationToken Returns Task<Guid?> Product id GetProductsAsync(CancellationToken) Get all products Task<IEnumerable<Product>> GetProductsAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Returns Task<IEnumerable<Product>> Products"
  },
  "api/CICDTemplate.Domain.Repositories.html": {
    "href": "api/CICDTemplate.Domain.Repositories.html",
    "title": "Namespace CICDTemplate.Domain.Repositories | CICDTemplate",
    "summary": "Namespace CICDTemplate.Domain.Repositories Interfaces IProductsRepository Products repository"
  },
  "api/CICDTemplate.Infrastructure.ApplicationDbContext.html": {
    "href": "api/CICDTemplate.Infrastructure.ApplicationDbContext.html",
    "title": "Class ApplicationDbContext | CICDTemplate",
    "summary": "Class ApplicationDbContext Namespace CICDTemplate.Infrastructure Assembly CICDTemplate.Infrastructure.dll public sealed class ApplicationDbContext : DbContext, IInfrastructure<IServiceProvider>, IDbContextDependencies, IDbSetCache, IDbContextPoolable, IResettableService, IDisposable, IAsyncDisposable Inheritance object DbContext ApplicationDbContext Implements IInfrastructure<IServiceProvider> IDbContextDependencies IDbSetCache IDbContextPoolable IResettableService IDisposable IAsyncDisposable Inherited Members DbContext.Set<TEntity>() DbContext.Set<TEntity>(string) DbContext.SaveChanges() DbContext.SaveChanges(bool) DbContext.SaveChangesAsync(CancellationToken) DbContext.SaveChangesAsync(bool, CancellationToken) DbContext.Dispose() DbContext.DisposeAsync() DbContext.Entry<TEntity>(TEntity) DbContext.Entry(object) DbContext.Add<TEntity>(TEntity) DbContext.AddAsync<TEntity>(TEntity, CancellationToken) DbContext.Attach<TEntity>(TEntity) DbContext.Update<TEntity>(TEntity) DbContext.Remove<TEntity>(TEntity) DbContext.Add(object) DbContext.AddAsync(object, CancellationToken) DbContext.Attach(object) DbContext.Update(object) DbContext.Remove(object) DbContext.AddRange(params object[]) DbContext.AddRangeAsync(params object[]) DbContext.AttachRange(params object[]) DbContext.UpdateRange(params object[]) DbContext.RemoveRange(params object[]) DbContext.AddRange(IEnumerable<object>) DbContext.AddRangeAsync(IEnumerable<object>, CancellationToken) DbContext.AttachRange(IEnumerable<object>) DbContext.UpdateRange(IEnumerable<object>) DbContext.RemoveRange(IEnumerable<object>) DbContext.Find(Type, params object[]) DbContext.FindAsync(Type, params object[]) DbContext.FindAsync(Type, object[], CancellationToken) DbContext.Find<TEntity>(params object[]) DbContext.FindAsync<TEntity>(params object[]) DbContext.FindAsync<TEntity>(object[], CancellationToken) DbContext.FromExpression<TResult>(Expression<Func<IQueryable<TResult>>>) DbContext.Database DbContext.ChangeTracker DbContext.Model DbContext.ContextId DbContext.SavingChanges DbContext.SavedChanges DbContext.SaveChangesFailed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ApplicationDbContext(DbContextOptions<ApplicationDbContext>) public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) Parameters options DbContextOptions<ApplicationDbContext> Methods OnModelCreating(ModelBuilder) Override this method to further configure the model that was discovered by convention from the entity types exposed in DbSet<TEntity> properties on your derived context. The resulting model may be cached and re-used for subsequent instances of your derived context. protected override void OnModelCreating(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The builder being used to construct the model for this context. Databases (and other extensions) typically define extension methods on this object that allow you to configure aspects of the model that are specific to a given database. Remarks If a model is explicitly set on the options for this context (via UseModel(IModel)) then this method will not be run. However, it will still run when creating a compiled model. See Modeling entity types and relationships for more information and examples."
  },
  "api/CICDTemplate.Infrastructure.Bootstrap.html": {
    "href": "api/CICDTemplate.Infrastructure.Bootstrap.html",
    "title": "Class Bootstrap | CICDTemplate",
    "summary": "Class Bootstrap Namespace CICDTemplate.Infrastructure Assembly CICDTemplate.Infrastructure.dll public static class Bootstrap Inheritance object Bootstrap Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddInfrastructure(IServiceCollection, IConfiguration) public static IServiceCollection AddInfrastructure(this IServiceCollection services, IConfiguration configuration) Parameters services IServiceCollection configuration IConfiguration Returns IServiceCollection"
  },
  "api/CICDTemplate.Infrastructure.Caching.CacheOptions.html": {
    "href": "api/CICDTemplate.Infrastructure.Caching.CacheOptions.html",
    "title": "Class CacheOptions | CICDTemplate",
    "summary": "Class CacheOptions Namespace CICDTemplate.Infrastructure.Caching Assembly CICDTemplate.Infrastructure.dll public static class CacheOptions Inheritance object CacheOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DefaultExpiration public static DistributedCacheEntryOptions DefaultExpiration { get; } Property Value DistributedCacheEntryOptions Methods Create(TimeSpan?) public static DistributedCacheEntryOptions Create(TimeSpan? expiration) Parameters expiration TimeSpan? Returns DistributedCacheEntryOptions"
  },
  "api/CICDTemplate.Infrastructure.Caching.CacheService.html": {
    "href": "api/CICDTemplate.Infrastructure.Caching.CacheService.html",
    "title": "Class CacheService | CICDTemplate",
    "summary": "Class CacheService Namespace CICDTemplate.Infrastructure.Caching Assembly CICDTemplate.Infrastructure.dll public sealed class CacheService : ICacheService Inheritance object CacheService Implements ICacheService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors CacheService(IDistributedCache) public CacheService(IDistributedCache cache) Parameters cache IDistributedCache Methods GetAsync<T>(string, CancellationToken) public Task<T?> GetAsync<T>(string key, CancellationToken cancellationToken = default) Parameters key string cancellationToken CancellationToken Returns Task<T> Type Parameters T RemoveAsync(string, CancellationToken) public Task RemoveAsync(string key, CancellationToken cancellationToken = default) Parameters key string cancellationToken CancellationToken Returns Task SetAsync<T>(string, T, TimeSpan?, CancellationToken) public Task SetAsync<T>(string key, T value, TimeSpan? expiration, CancellationToken cancellationToken = default) Parameters key string value T expiration TimeSpan? cancellationToken CancellationToken Returns Task Type Parameters T"
  },
  "api/CICDTemplate.Infrastructure.Caching.html": {
    "href": "api/CICDTemplate.Infrastructure.Caching.html",
    "title": "Namespace CICDTemplate.Infrastructure.Caching | CICDTemplate",
    "summary": "Namespace CICDTemplate.Infrastructure.Caching Classes CacheOptions CacheService"
  },
  "api/CICDTemplate.Infrastructure.Clock.DateTimeProvider.html": {
    "href": "api/CICDTemplate.Infrastructure.Clock.DateTimeProvider.html",
    "title": "Class DateTimeProvider | CICDTemplate",
    "summary": "Class DateTimeProvider Namespace CICDTemplate.Infrastructure.Clock Assembly CICDTemplate.Infrastructure.dll public sealed class DateTimeProvider : IDateTimeProvider Inheritance object DateTimeProvider Implements IDateTimeProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Now Easy to mock public DateTime Now { get; } Property Value DateTime"
  },
  "api/CICDTemplate.Infrastructure.Clock.html": {
    "href": "api/CICDTemplate.Infrastructure.Clock.html",
    "title": "Namespace CICDTemplate.Infrastructure.Clock | CICDTemplate",
    "summary": "Namespace CICDTemplate.Infrastructure.Clock Classes DateTimeProvider"
  },
  "api/CICDTemplate.Infrastructure.Configurations.ProductConfiguration.html": {
    "href": "api/CICDTemplate.Infrastructure.Configurations.ProductConfiguration.html",
    "title": "Class ProductConfiguration | CICDTemplate",
    "summary": "Class ProductConfiguration Namespace CICDTemplate.Infrastructure.Configurations Assembly CICDTemplate.Infrastructure.dll public sealed class ProductConfiguration : IEntityTypeConfiguration<Product> Inheritance object ProductConfiguration Implements IEntityTypeConfiguration<Product> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Configure(EntityTypeBuilder<Product>) Configures the entity of type Product. public void Configure(EntityTypeBuilder<Product> builder) Parameters builder EntityTypeBuilder<Product> The builder to be used to configure the entity type."
  },
  "api/CICDTemplate.Infrastructure.Configurations.html": {
    "href": "api/CICDTemplate.Infrastructure.Configurations.html",
    "title": "Namespace CICDTemplate.Infrastructure.Configurations | CICDTemplate",
    "summary": "Namespace CICDTemplate.Infrastructure.Configurations Classes ProductConfiguration"
  },
  "api/CICDTemplate.Infrastructure.Migrations.DbMigration.html": {
    "href": "api/CICDTemplate.Infrastructure.Migrations.DbMigration.html",
    "title": "Class DbMigration | CICDTemplate",
    "summary": "Class DbMigration Namespace CICDTemplate.Infrastructure.Migrations Assembly CICDTemplate.Infrastructure.dll A base class inherited by each EF Core migration. [DbContext(typeof(ApplicationDbContext))] [Migration(\"20250507080435_DbMigration\")] public class DbMigration : Migration Inheritance object Migration DbMigration Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/CICDTemplate.Infrastructure.Migrations.html": {
    "href": "api/CICDTemplate.Infrastructure.Migrations.html",
    "title": "Namespace CICDTemplate.Infrastructure.Migrations | CICDTemplate",
    "summary": "Namespace CICDTemplate.Infrastructure.Migrations Classes DbMigration A base class inherited by each EF Core migration."
  },
  "api/CICDTemplate.Infrastructure.Repositories.ProductsRepository.html": {
    "href": "api/CICDTemplate.Infrastructure.Repositories.ProductsRepository.html",
    "title": "Class ProductsRepository | CICDTemplate",
    "summary": "Class ProductsRepository Namespace CICDTemplate.Infrastructure.Repositories Assembly CICDTemplate.Infrastructure.dll public sealed class ProductsRepository : IProductsRepository Inheritance object ProductsRepository Implements IProductsRepository Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ProductsRepository(ApplicationDbContext) public ProductsRepository(ApplicationDbContext dbContext) Parameters dbContext ApplicationDbContext Methods CreateProductAsync(Product, CancellationToken) Create product public Task<Guid?> CreateProductAsync(Product product, CancellationToken cancellationToken = default) Parameters product Product Product cancellationToken CancellationToken Returns Task<Guid?> Product id GetProductsAsync(CancellationToken) Get all products public Task<IEnumerable<Product>> GetProductsAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Returns Task<IEnumerable<Product>> Products"
  },
  "api/CICDTemplate.Infrastructure.Repositories.html": {
    "href": "api/CICDTemplate.Infrastructure.Repositories.html",
    "title": "Namespace CICDTemplate.Infrastructure.Repositories | CICDTemplate",
    "summary": "Namespace CICDTemplate.Infrastructure.Repositories Classes ProductsRepository"
  },
  "api/CICDTemplate.Infrastructure.html": {
    "href": "api/CICDTemplate.Infrastructure.html",
    "title": "Namespace CICDTemplate.Infrastructure | CICDTemplate",
    "summary": "Namespace CICDTemplate.Infrastructure Classes ApplicationDbContext Bootstrap"
  },
  "api/CICDTemplate.MigrationService.Worker.html": {
    "href": "api/CICDTemplate.MigrationService.Worker.html",
    "title": "Class Worker | CICDTemplate",
    "summary": "Class Worker Namespace CICDTemplate.MigrationService Assembly CICDTemplate.MigrationService.dll public class Worker : BackgroundService, IHostedService, IDisposable Inheritance object BackgroundService Worker Implements IHostedService IDisposable Inherited Members BackgroundService.Dispose() BackgroundService.StartAsync(CancellationToken) BackgroundService.StopAsync(CancellationToken) BackgroundService.ExecuteTask object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Worker(IServiceProvider, IHostApplicationLifetime) public Worker(IServiceProvider serviceProvider, IHostApplicationLifetime hostApplicationLifetime) Parameters serviceProvider IServiceProvider hostApplicationLifetime IHostApplicationLifetime Fields ActivitySource public static readonly ActivitySource ActivitySource Field Value ActivitySource ActivitySourceName public const string ActivitySourceName = \"Migrations\" Field Value string Methods ExecuteAsync(CancellationToken) This method is called when the IHostedService starts. The implementation should return a task that represents the lifetime of the long running operation(s) being performed. protected override Task ExecuteAsync(CancellationToken stoppingToken) Parameters stoppingToken CancellationToken Triggered when StopAsync(CancellationToken) is called. Returns Task A Task that represents the long running operations. Remarks See Worker Services in .NET for implementation guidelines."
  },
  "api/CICDTemplate.MigrationService.html": {
    "href": "api/CICDTemplate.MigrationService.html",
    "title": "Namespace CICDTemplate.MigrationService | CICDTemplate",
    "summary": "Namespace CICDTemplate.MigrationService Classes Worker"
  },
  "api/CICDTemplate.ServiceDefaults.SupportExtensions.html": {
    "href": "api/CICDTemplate.ServiceDefaults.SupportExtensions.html",
    "title": "Class SupportExtensions | CICDTemplate",
    "summary": "Class SupportExtensions Namespace CICDTemplate.ServiceDefaults Assembly CICDTemplate.ServiceDefaults.dll public static class SupportExtensions Inheritance object SupportExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddDefaultHealthChecks<TBuilder>(TBuilder) public static TBuilder AddDefaultHealthChecks<TBuilder>(this TBuilder builder) where TBuilder : IHostApplicationBuilder Parameters builder TBuilder Returns TBuilder Type Parameters TBuilder AddServiceDefaults<TBuilder>(TBuilder) public static TBuilder AddServiceDefaults<TBuilder>(this TBuilder builder) where TBuilder : IHostApplicationBuilder Parameters builder TBuilder Returns TBuilder Type Parameters TBuilder ConfigureOpenTelemetry<TBuilder>(TBuilder) public static TBuilder ConfigureOpenTelemetry<TBuilder>(this TBuilder builder) where TBuilder : IHostApplicationBuilder Parameters builder TBuilder Returns TBuilder Type Parameters TBuilder MapDefaultEndpoints(WebApplication) public static WebApplication MapDefaultEndpoints(this WebApplication app) Parameters app WebApplication Returns WebApplication"
  },
  "api/CICDTemplate.ServiceDefaults.html": {
    "href": "api/CICDTemplate.ServiceDefaults.html",
    "title": "Namespace CICDTemplate.ServiceDefaults | CICDTemplate",
    "summary": "Namespace CICDTemplate.ServiceDefaults Classes SupportExtensions"
  },
  "api/Projects.CICDTemplate_Api.html": {
    "href": "api/Projects.CICDTemplate_Api.html",
    "title": "Class CICDTemplate_Api | CICDTemplate",
    "summary": "Class CICDTemplate_Api Namespace Projects Assembly CICDTemplate.AppHost.dll public class CICDTemplate_Api : IProjectMetadata, IResourceAnnotation Inheritance object CICDTemplate_Api Implements IProjectMetadata IResourceAnnotation Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ProjectPath Gets the fully-qualified path to the project. public string ProjectPath { get; } Property Value string"
  },
  "api/Projects.CICDTemplate_AppHost.html": {
    "href": "api/Projects.CICDTemplate_AppHost.html",
    "title": "Class CICDTemplate_AppHost | CICDTemplate",
    "summary": "Class CICDTemplate_AppHost Namespace Projects Assembly CICDTemplate.AppHost.dll public class CICDTemplate_AppHost Inheritance object CICDTemplate_AppHost Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ProjectPath public static string ProjectPath { get; } Property Value string"
  },
  "api/Projects.CICDTemplate_MigrationService.html": {
    "href": "api/Projects.CICDTemplate_MigrationService.html",
    "title": "Class CICDTemplate_MigrationService | CICDTemplate",
    "summary": "Class CICDTemplate_MigrationService Namespace Projects Assembly CICDTemplate.AppHost.dll public class CICDTemplate_MigrationService : IProjectMetadata, IResourceAnnotation Inheritance object CICDTemplate_MigrationService Implements IProjectMetadata IResourceAnnotation Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ProjectPath Gets the fully-qualified path to the project. public string ProjectPath { get; } Property Value string"
  },
  "api/Projects.html": {
    "href": "api/Projects.html",
    "title": "Namespace Projects | CICDTemplate",
    "summary": "Namespace Projects Classes CICDTemplate_Api CICDTemplate_AppHost CICDTemplate_MigrationService"
  },
  "docs/00. Intro.html": {
    "href": "docs/00. Intro.html",
    "title": "Getting Started | CICDTemplate",
    "summary": "Getting Started Follow steps below, to get started Pre-requisites Install Docker winget install -e Docker.DockerDesktop Ensure .NET 9 SDK is installed dotnet --version Ensure Aspire workload is up to date dotnet workload list dotnet workload update Ensure Dapr is installed and initialized winget install -e Dapr.CLI dapr init dapr --version Restore tools Restore dotnet tools dotnet tool restore"
  },
  "docs/01. Database Migration.html": {
    "href": "docs/01. Database Migration.html",
    "title": "Database Migration | CICDTemplate",
    "summary": "Database Migration Restore tools dotnet tool restore Migration Run following command, from PowerShell 7+, if Database schema is modified dotnet ef migrations add \"<migration-message>\" -s .\\src\\CICDTemplate.MigrationService\\CICDTemplate.MigrationService.csproj -p .\\src\\CICDTemplate.Infrastructure\\CICDTemplate.Infrastructure.csproj Note: Replace <migration-message> with a meaningful migration name"
  },
  "docs/02. Mutation Testing.html": {
    "href": "docs/02. Mutation Testing.html",
    "title": "Mutation Testing | CICDTemplate",
    "summary": "Mutation Testing Using Stryker Restore tools dotnet tool restore Run mutation tests dotnet stryker --solution .\\CICDTemplate.sln -r \"html\" -r \"progress\" -r \"markdown\" Mutation tests are time soncuming, hence disabled by default from build.ps1 file. Highly recommend running them, before raising a PR"
  },
  "docs/03. Code Coverage.html": {
    "href": "docs/03. Code Coverage.html",
    "title": "Code Coverage | CICDTemplate",
    "summary": "Code Coverage Restore tools dotnet tool restore Execute tests dotnet test -c Release .\\CICDTemplate.slnx --collect:\"XPlat Code Coverage\" --settings .\\coverage.runsettings Generate Coverage Report dotnet reportgenerator \"-reports:./**/TestResults/*/coverage.cobertura.xml\" \"-targetdir:./.coverage\" -reporttypes:\"Html_Dark;SonarQube\""
  },
  "docs/04. Package Updates.html": {
    "href": "docs/04. Package Updates.html",
    "title": "Check outdated nuget packages | CICDTemplate",
    "summary": "Check outdated nuget packages dotnet list package --outdated"
  },
  "docs/05. DAPR Components.html": {
    "href": "docs/05. DAPR Components.html",
    "title": "DAPR Components | CICDTemplate",
    "summary": "DAPR Components Block Environment Component State Store Redis Redis Configuration Redis Redis Pub / Sub In-Memory Redis Secret Store Local File (json) Kubernetes Secrets Pub / Sub Redis already setup apiVersion: dapr.io/v1alpha1 kind: Component metadata: name: pubsub spec: type: pubsub.redis version: v1 metadata: - name: redisHost value: localhost:6500"
  },
  "docs/06. Smoke Test.html": {
    "href": "docs/06. Smoke Test.html",
    "title": "Smoke Test - on Kubernetes | CICDTemplate",
    "summary": "Smoke Test - on Kubernetes Verify CRON Verify Pub / Sub Aspire Dashboard Read secret Read Config Verify Caching To verify secrets, create a kubernetes secret kubectl create secret generic hello --from-literal=hello=world To verify config, create a key value pair, on redis, key type string"
  },
  "index.html": {
    "href": "index.html",
    "title": "Progress | CICDTemplate",
    "summary": "Progress Checklist on roadmap Clean Architecture Replace with Vertical Slice Architecture CQRS Commands with PostgreSql + EF Core Queries with MongoDB + EF Core CDC using Debezium MediatR Test Automation Unit Tests - xUnit and NSubstitute Functional Tests In Memory API Testing WebApplicationFactory Testcontainers BDD using Reqnroll Mutation Tests - Stryker recommended for local only Architecture Tests - NetArchTest.Rules Code Coverage Orchestration Aspire RDBMS - PostgreSQL NoSQL - MongoDB Distributed Cache - Redis Aspire Dashboard Health Checks Self PostgreSQL Database Redis MongoDB Observability - Aspire Dashboard Logging Metrics Distributed Tracing DAPR Pub / Sub - Redis Streams Code Tour Service Invocation State Management - Redis Save state Read state Delete state Secrets Management - Json File Based Configurations Store Bindings Input: Cron Code Tour Misc Git ignore Editor config Build props Code Analysis Tool manifest Automapper / Mapster Validation Fluent Validation Dependabot to update outdated nuget packages Security Score Card Build Local build - Notebook GitHub Action Tool Restore Package Restore Build Test Publish Coverage Report Pack as nuget package Push to nuget.org Deployment Install Dependencies Dapr Redis Postgresql Aspire Dashboard Dapr Components State store Pub / Sub Secret store Configuration store Cron Binding Deploy API Performance Load Testing - using K6"
  }
}